class Pair{
    int first;
    int second;
    public Pair(int first,int second)
    {
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public void bfs(int row,int col,int[][] grid,int[][] vis)
    {
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair> q=new LinkedList<Pair>();
        q.add(new Pair(row,col));
        vis[row][col]=1;
        while(!q.isEmpty())
        {
            int crow=q.peek().first;
            int ccol=q.peek().second;
            q.remove();
            for(int delrow=-1;delrow<=1;delrow++)
            {
                for(int delcol=-1;delcol<=1;delcol++)
                {
                    int nebrow=crow+delrow;
                    int nebcol=ccol+delcol;
                    if(nebrow>=0 && nebrow<n && nebcol>=0 && nebcol<m && grid[nebrow][nebcol]==1 && vis[nebrow][nebcol]==0)
                    {
                        vis[nebrow][nebcol]=1;
                        q.add(new Pair(nebrow,nebcol));
                    }
                }
            }
        }
    }
    public int closedIsland(int[][] grid) {
        int count=0;
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        for(int row=0;row<n;row++)
        {
            for(int col=0;col<m;col++)
            {
                if(vis[row][col]==0 && grid[row][col]==1)
                {
                bfs(row,col,grid,vis);
                count++;
                }
            }
        }
        return count;
    }
}