surround regions
class Solution {
    void dfs(int row,int col,int[] delrow,int[] delcol,int[][] vis,char[][] board)
    {
        vis[row][col]=1;
        int n=board.length;
        int m=board[0].length;
        for(int i=0;i<4;i++)
        {
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0 && board[nrow][ncol]=='O')
            {
                dfs(nrow,ncol,delrow,delcol,vis,board);
            }
        }
    }
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        int[][] vis=new int[n][m];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                vis[i][j]=0;
            }
        }
        int[] defrow={-1,0,1,0};
        int[] defcol={0,1,0,-1};
        for(int i=0;i<m;i++)
        {
            if(vis[0][i]==0 && board[0][i]=='O')
            {
            dfs(0,i,defrow,defcol,vis,board);
            }
        }
        for(int i=0;i<n;i++)
        {
            if(vis[i][0]==0 && board[i][0]=='O')
            {
            dfs(i,0,defrow,defcol,vis,board);
            }
        }
        for(int i=0;i<m;i++)
        {
            if(vis[n-1][i]==0 && board[n-1][i]=='O')
            {
            dfs(n-1,i,defrow,defcol,vis,board);
            }
        }
        for(int i=0;i<n;i++)
        {
            if(vis[i][m-1]==0 && board[i][m-1]=='O')
            {
            dfs(i,m-1,defrow,defcol,vis,board);
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]==0 && board[i][j]=='O')
                {
                    board[i][j]='X';
                }
            }
        }
    }
}